{
  "_args": [
    [
      {
        "raw": "karma-mocha-reporter@^2.2.3",
        "scope": null,
        "escapedName": "karma-mocha-reporter",
        "name": "karma-mocha-reporter",
        "rawSpec": "^2.2.3",
        "spec": ">=2.2.3 <3.0.0",
        "type": "range"
      },
      "/home/valentina/Desktop/prog/Extra"
    ]
  ],
  "_from": "karma-mocha-reporter@>=2.2.3 <3.0.0",
  "_id": "karma-mocha-reporter@2.2.5",
  "_inCache": true,
  "_location": "/karma-mocha-reporter",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/karma-mocha-reporter-2.2.5.tgz_1508228534591_0.8848229800350964"
  },
  "_npmUser": {
    "name": "litixsoft",
    "email": "info@litixsoft.de"
  },
  "_npmVersion": "4.0.3",
  "_phantomChildren": {
    "color-convert": "1.9.1",
    "escape-string-regexp": "1.0.5"
  },
  "_requested": {
    "raw": "karma-mocha-reporter@^2.2.3",
    "scope": null,
    "escapedName": "karma-mocha-reporter",
    "name": "karma-mocha-reporter",
    "rawSpec": "^2.2.3",
    "spec": ">=2.2.3 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/karma-mocha-reporter/-/karma-mocha-reporter-2.2.5.tgz",
  "_shasum": "15120095e8ed819186e47a0b012f3cd741895560",
  "_shrinkwrap": null,
  "_spec": "karma-mocha-reporter@^2.2.3",
  "_where": "/home/valentina/Desktop/prog/Extra",
  "author": {
    "name": "Litixsoft GmbH",
    "email": "info@litixsoft.de",
    "url": "http://www.litixsoft.de"
  },
  "bugs": {
    "url": "https://github.com/litixsoft/karma-mocha-reporter/issues"
  },
  "contributors": [
    {
      "name": "Artem Baguinski",
      "email": "abaguinski@gmail.com"
    },
    {
      "name": "Brendan Nee",
      "email": "brendan@blinktag.com"
    },
    {
      "name": "Túbal Martín"
    },
    {
      "name": "M-Koch"
    },
    {
      "name": "Ryan P Kilby"
    },
    {
      "name": "christian-fei"
    },
    {
      "name": "Clay Anderson"
    },
    {
      "name": "Minh Son Nguyen"
    },
    {
      "name": "Adam Craven"
    },
    {
      "name": "Teddy Sterne"
    }
  ],
  "dependencies": {
    "chalk": "^2.1.0",
    "log-symbols": "^2.1.0",
    "strip-ansi": "^4.0.0"
  },
  "description": "Karma reporter with mocha style logging.",
  "devDependencies": {
    "chai": "^4",
    "grunt": "^1.0.1",
    "grunt-bump": "^0.8.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-jshint": "^1.1.0",
    "grunt-conventional-changelog": "^6.1.0",
    "grunt-karma": "^2.0.0",
    "grunt-shell": "^2.1.0",
    "jasmine-core": "^2.8.0",
    "karma": ">=0.13",
    "karma-chai": "^0.1.0",
    "karma-chrome-launcher": "*",
    "karma-detect-browsers": "^2.2.5",
    "karma-firefox-launcher": "*",
    "karma-ie-launcher": "*",
    "karma-jasmine": "*",
    "karma-mocha": "*",
    "karma-opera-launcher": "*",
    "karma-phantomjs-launcher": "*",
    "karma-safari-launcher": "*",
    "karma-safaritechpreview-launcher": "*",
    "load-grunt-tasks": "^3.5.2",
    "mocha": "^4",
    "phantomjs-prebuilt": "^2.1.15"
  },
  "directories": {},
  "dist": {
    "shasum": "15120095e8ed819186e47a0b012f3cd741895560",
    "tarball": "https://registry.npmjs.org/karma-mocha-reporter/-/karma-mocha-reporter-2.2.5.tgz"
  },
  "gitHead": "55a9c9922bf5e81dc3be2157b900246df6e66a75",
  "homepage": "http://www.litixsoft.de/index.php?lang=en#modules",
  "keywords": [
    "karma-plugin",
    "karma-reporter",
    "mocha",
    "chai",
    "diff",
    "symbols"
  ],
  "license": "MIT",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/litixsoft/karma-mocha-reporter/blob/master/LICENSE"
    }
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "Timo Liebetrau",
      "email": "t.liebetrau@litixsoft.de"
    },
    {
      "name": "Marco Kannenberg",
      "email": "m.kannenberg@litixsoft.de"
    },
    {
      "name": "Sven Bernstein",
      "email": "s.bernstein@litixsoft.de"
    },
    {
      "name": "Dominic Sachs",
      "email": "d.sachs@litixsoft.de"
    },
    {
      "name": "Thomas Scheibe",
      "email": "th.scheibe@litixsoft.de"
    },
    {
      "name": "Mike Alig",
      "email": "m.alig@litixsoft.de"
    },
    {
      "name": "Joerg Raschke",
      "email": "j.Raschke@litixsoft.de"
    },
    {
      "name": "Andreas Krummsdorf",
      "email": "a.krummsdorf@litixsoft.de"
    }
  ],
  "name": "karma-mocha-reporter",
  "optionalDependencies": {},
  "peerDependencies": {
    "karma": ">=0.13"
  },
  "readme": "# karma-mocha-reporter\r\n\r\n> Karma reporter plugin with mocha style logging.\r\n\r\n> [![NPM version](https://badge.fury.io/js/karma-mocha-reporter.svg)](http://badge.fury.io/js/karma-mocha-reporter)\r\n[![Build Status](https://secure.travis-ci.org/litixsoft/karma-mocha-reporter.svg?branch=master)](https://travis-ci.org/litixsoft/karma-mocha-reporter)\r\n[![david-dm](https://david-dm.org/litixsoft/karma-mocha-reporter.svg?theme=shields.io)](https://david-dm.org/litixsoft/karma-mocha-reporter/)\r\n[![david-dm](https://david-dm.org/litixsoft/karma-mocha-reporter/dev-status.svg?theme=shields.io)](https://david-dm.org/litixsoft/karma-mocha-reporter#info=devDependencies&view=table)\r\n\r\n## How does it look like\r\n![screenshot](demo/screen.png)\r\n\r\n## Installation\r\nThe easiest way is to keep `karma-mocha-reporter` as a devDependency in your `package.json`.\r\n```json\r\n{\r\n  \"devDependencies\": {\r\n    \"karma\": \"^1.0.0\",\r\n    \"karma-mocha-reporter\": \"^2.0.0\"\r\n  }\r\n}\r\n```\r\n\r\nYou can simply do it by:\r\n\r\n    $ npm install karma-mocha-reporter --save-dev\r\n\r\n## Configuration\r\n```js\r\n// karma.conf.js\r\nmodule.exports = function(config) {\r\n  config.set({\r\n    frameworks: ['jasmine'],\r\n\r\n    // reporters configuration\r\n    reporters: ['mocha']\r\n  });\r\n};\r\n```\r\n\r\n## Options\r\n### colors\r\n**Type:** Object | Boolean\r\n\r\nLets you overwrite the default colors. Possible values are all colors and background colors from [chalk](https://github.com/chalk/chalk#colors).\r\n\r\n**Possible Values:**\r\n\r\nValue | Description | Default\r\n------ | ----------- | -------\r\n`success` | success messages | green\r\n`info` | info messages | grey\r\n`warning` | warn messages | yellow\r\n`error` | error messages | red\r\n\r\n```js\r\n// karma.conf.js\r\nmodule.exports = function(config) {\r\n  config.set({\r\n    frameworks: ['jasmine'],\r\n\r\n    // reporters configuration\r\n    reporters: ['mocha'],\r\n\r\n    // reporter options\r\n    mochaReporter: {\r\n      colors: {\r\n        success: 'blue',\r\n        info: 'bgGreen',\r\n        warning: 'cyan',\r\n        error: 'bgRed'\r\n      },\r\n      symbols: {\r\n        success: '+',\r\n        info: '#',\r\n        warning: '!',\r\n        error: 'x'\r\n      }\r\n    }\r\n  });\r\n};\r\n```\r\n\r\nTo disable the colors please use the `colors` option in the karma config.\r\n\r\n```js\r\n// karma.conf.js\r\nmodule.exports = function(config) {\r\n  config.set({\r\n    frameworks: ['jasmine'],\r\n\r\n    // reporters configuration\r\n    reporters: ['mocha'],\r\n\r\n    // disable colors\r\n    colors: false\r\n  });\r\n};\r\n```\r\n\r\n### symbols\r\n**Type:** Object\r\n\r\nLets you overwrite the default symbols.\r\n\r\n**Possible Values:**\r\n\r\nValue | Description | Default\r\n------ | ----------- | -------\r\n`success` | success messages | ✔\r\n`info` | info messages | ℹ\r\n`warning` | warn messages | ⚠\r\n`error` | error messages | ✖\r\n\r\n```js\r\n// karma.conf.js\r\nmodule.exports = function(config) {\r\n  config.set({\r\n    frameworks: ['jasmine'],\r\n\r\n    // reporters configuration\r\n    reporters: ['mocha'],\r\n\r\n    // reporter options\r\n    mochaReporter: {\r\n      symbols: {\r\n        success: '+',\r\n        info: '#',\r\n        warning: '!',\r\n        error: 'x'\r\n      }\r\n    }\r\n  });\r\n};\r\n```\r\n\r\n### output\r\n**Type:** String\r\n\r\n**Possible Values:**\r\n\r\nValue | Description\r\n------ | -----------\r\n`full` (default) | all output is printed to the console\r\n`autowatch` | first run will have the full output and the next runs just output the summary and errors in mocha style\r\n`minimal` | only the summary and errors are printed to the console in mocha style\r\n`noFailures` | the failure details are not logged\r\n\r\n```js\r\n// karma.conf.js\r\nmodule.exports = function(config) {\r\n  config.set({\r\n    frameworks: ['jasmine'],\r\n\r\n    // reporters configuration\r\n    reporters: ['mocha'],\r\n\r\n    // reporter options\r\n    mochaReporter: {\r\n      output: 'autowatch'\r\n    }\r\n  });\r\n};\r\n```\r\n\r\n### showDiff\r\n**Type:** String | Boolean\r\n\r\nShows a diff output. Is disabled by default. All credits to the contributors of [mocha](https://github.com/mochajs/mocha), since the diff logic is used from there and customized for this module.\r\n\r\n![screenshot](demo/diff.png)\r\n\r\nCurrently only works with karma-mocha >= v0.2.2 Not supported for karma-jasmine since the additional properties needed to render the diff are not supported in jasmine yet.\r\n\r\n**Possible Values:**\r\n\r\nValue | Description\r\n------ | -----------\r\n`true` | prints each diff in its own line, same as `'unified'`\r\n`'unified'` | prints each diff in its own line\r\n`'inline'` | prints diffs inline\r\n\r\n```js\r\n// karma.conf.js\r\nmodule.exports = function(config) {\r\n  config.set({\r\n    frameworks: ['mocha', 'chai'],\r\n\r\n    // reporters configuration\r\n    reporters: ['mocha'],\r\n\r\n    // reporter options\r\n    mochaReporter: {\r\n      showDiff: true\r\n    }\r\n  });\r\n};\r\n```\r\n\r\n### divider\r\n**Type:** String\r\n\r\n**Default:** 80 equals signs ('=')\r\n\r\nThe string to output between multiple test runs. Set to `false` or empty string to disable\r\n\r\n```js\r\n// karma.conf.js\r\nmodule.exports = function(config) {\r\n  config.set({\r\n    frameworks: ['jasmine'],\r\n\r\n    // reporters configuration\r\n    reporters: ['mocha'],\r\n\r\n    // reporter options\r\n    mochaReporter: {\r\n      divider: ''\r\n    }\r\n  });\r\n};\r\n```\r\n\r\n### ignoreSkipped\r\n**Type:** Boolean\r\n\r\n**Possible Values:**\r\n  * `false` (default)\r\n  * `true`\r\n\r\nWhen setting the ignoreSkipped flag to true, the reporter will ignore the skipped tests in the output and you will see\r\nonly the tests that where really executed. The summary will still contain the number of skipped tests.\r\n\r\n### maxLogLines\r\n**Type:** Number\r\n\r\nLets you set the maximum number of lines which are printed for a failure. The default value is 999. Helps to cut long stack traces.\r\nSet the value to `-1` to disable stack traces.\r\n\r\n### printFirstSuccess\r\n**Type:** Boolean\r\n\r\n**Possible Values:**\r\n  * `false` (default)\r\n  * `true`\r\n\r\nPrints the result of an it block after it is run in one browser. This options is useful when you have tests which are conditionally run in one browser only.\r\nOtherwise the result of the it block would not be printed because it was not run in all browsers.\r\n\r\n```js\r\n// testfile.spec.js\r\nif (navigator.userAgent.match(/firefox/i)) {\r\n  describe('Firefox tests', function() {\r\n    it('this would only be reported when printFirstSuccess is true', function() {\r\n      console.log('firefox test');\r\n    });\r\n  });\r\n}\r\n\r\ndescribe('Other tests', function() {\r\n  it('this should be always reported', function() {\r\n    console.log('hello world');\r\n  });\r\n});\r\n```\r\n\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide take care to maintain the existing coding style. Lint and test your code using [grunt](http://gruntjs.com/).\r\n\r\nYou can preview your changes by running:\r\n\r\n    $ npm run demo\r\n\r\n## Author\r\n[Litixsoft GmbH](http://www.litixsoft.de)\r\n\r\n## License\r\nCopyright (C) 2013-2017 Litixsoft GmbH <info@litixsoft.de>\r\nLicensed under the MIT license.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included i\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/litixsoft/karma-mocha-reporter.git"
  },
  "scripts": {
    "demo": "grunt demo --force",
    "test": "grunt test"
  },
  "version": "2.2.5"
}
